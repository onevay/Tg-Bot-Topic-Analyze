from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove, FSInputFile
from aiogram import filters
from aiogram.enums import ParseMode
import app.db as db
import topic_funcs.gensi as gn
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
import topic_funcs.vizualize as viz
import topic_funcs.probably as prob
import topic_funcs.textb as req
from decouple import config


db_url = config('DB_URL')
host = config('HOST')
port = config('PORT')
user = config('USER')
password = config('PASSWORD')
database = config('DB_NAME')
import app.keyboard as kb

router = Router()
test_dict = {}

def age_check(n: str):
    if n.isdigit():
        return True
    else:
        return False

def extract_number(text):
    match = re.search(r'\b(\d+)\b', text)
    if match:
        return int(match.group(1))
    else:
        return None

class UserData(StatesGroup):
    name: str = State()
    age: int | None = State()
    aim: str = State()
    gender: str | None = State()

class TopicAnalize(StatesGroup):
    start_analize: str = State()
    choice_rezult = State()

@router.message(filters.CommandStart())
async def start_bot(message: Message):
    await message.answer(text='–ü—Ä–∏–≤–µ—Ç!üòÅ')
    await message.answer(text='–¢—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –∑–Ω–∞–µ—à—å —Ü–µ–ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞üôÇ,\n'
                         '–Ω–æ –∫–æ–º–∞–Ω–¥–∞ /help –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å')
    await message.answer(text='–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µüôÇ\n'
                         '–ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–Ω–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)', reply_markup=kb.ancet_start)

@router.message(filters.Command('help'))
async def help(message: Message):
    await message.answer(
        text=f'üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*  \n\n'
             f'üîπ /start - *–Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º*  \n'
             f'üîπ /help - *–≤—Å–µ –æ–±—ä—è—Å–Ω–∏—Ç*  \n'
             f'üîπ /ancet_fill - *–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É*  \n'
             f'üîπ /start_topic - *–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞*',
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.message(filters.Command('start_topic'))
async def start_topic(message: Message):
    await message.answer(text=f'üöÄ*–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã\!*', parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.topic_start)

@router.message(filters.Command('ancet_fill'))
async def ancet_fill(message: Message):
    await message.answer(
        text=f'üìù *–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É:*  \n'
             f'‚òùÔ∏è*–° –Ω—É–ª—è*  \n'
             f'‚úåÔ∏è*–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–π*',
        reply_markup=kb.ancet_start,
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.callback_query(F.data == 'anceta')
async def cl_ancet_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text=f'üìù *–î–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º\!\n*'
                                  f'ü§î *–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?*', parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(UserData.name)
    await callback.answer()

@router.message(F.text, UserData.name)
async def get_name(message: Message, state: FSMContext):
    await message.answer(text=f'–¢–∞–∫, {message.text}, –∞ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?üò∂')
    await state.update_data(name=message.text)

    await state.set_state(UserData.age)

@router.message(UserData.name)
async def get_name_e(message: Message):
    await message.answer(
        text=f'‚ùå *–û—à–∏–±–∫–∞\!*  \n'
             f'ü§∑‚Äç‚ôÇÔ∏è *–¢—ã —è–≤–Ω–æ —Ç–∫–Ω—É–ª –Ω–µ —Ç—É–¥–∞\.*  \n'
             f'üîÑ *–ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è\!*',
        parse_mode=ParseMode.MARKDOWN_V2)

@router.message(F.text, UserData.age)
async def get_age(message: Message, state: FSMContext):
    if age_check(message.text):
        await state.update_data(age=extract_number(message.text))
        procent = db.age_procent(message.text)
        await message.answer(
            text=f'üéâ *–ü–æ—Å—á–∏—Ç–∞–ª–∏ –∏ –ø–æ–Ω—è–ª–∏\!*  \n'
                 f'üìä *–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å {procent}% –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\.*',
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await message.answer(
            text=f'ü§î *–° –≤–æ–∑—Ä–∞—Å—Ç–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å, –Ω–µ–ø–ª–æ—Ö–æ –±—ã –µ—â–µ –∏ –≥–µ–Ω–¥–µ—Ä —É–∑–Ω–∞—Ç—å\.*',
            reply_markup=kb.gen_button,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await state.set_state(UserData.gender)
    else:
        await message.answer(
            text=f'‚ùå *–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–¥—É\!*  \n'
                 f'üòï *–ú–æ–∂–µ—Ç, —Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–æ–¥–∏—à—å? –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\.*',
            parse_mode=ParseMode.MARKDOWN_V2
        )

@router.message(UserData.age)
async def get_age_e(message: Message):
    await message.answer(text='–ß—Ç–æ —ç—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å? –ù—É–∂–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç')

@router.message(F.text.in_(['üë©üèª –ñ–µ–Ω—â–∏–Ω–∞', 'üë®üèª –ú—É–∂—á–∏–Ω–∞']), UserData.gender)
async def get_gender(message: Message, state: FSMContext):
    await state.update_data(gender=message.text[2:].lower())
    procent = db.gender_procent(message.text[2:])
    await message.answer(
        text=f'üéâ *–ö–ª–∞—Å—Å\!*  \n'
             f'ü§ù *–¢–≤–æ–π –ø–æ–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–ª–æ–º {procent}% –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\.*',
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await message.answer(
        text=f'üí¨ *–†–∞—Å—Å–∫–∞–∂–∏, –ø–æ—á–µ–º—É —Ä–µ—à–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º?*',
        reply_markup=kb.air_foul,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(UserData.aim)

@router.message(UserData.gender)
async def get_gender_e(message: Message):
    await message.answer(
        text=f'‚ùå *–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–µ–Ω–¥–µ—Ä–∞\!*  \n'
             f'üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\.',
        parse_mode=ParseMode.MARKDOWN_V2)

@router.message(F.text, UserData.aim)
async def get_air(message: Message, state: FSMContext):
    await state.update_data(aim=message.text)
    db.insert(message.chat.id, await state.get_data())
    test_dict = db.print_data(message.chat.id)
    await message.answer(
        text=f'üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:*  \n\n'
             f'üë±üé§ *–ò–º—è:* {test_dict[0]}  \n'
             f'üïí *–í–æ–∑—Ä–∞—Å—Ç:* {test_dict[1]}  \n'
             f'üöª *–ü–æ–ª:* {test_dict[2]}  \n'
             f'üí¨ *–ü–æ—á–µ–º—É —Ä–µ—à–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:* {test_dict[3]}',
        reply_markup=kb.check_data,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.clear()

@router.message(UserData.aim)
async def get_air_e(message: Message):
    await message.answer(
        text=f'‚ùå *–†–∞–∑–≤–µ —ç—Ç–æ —Ü–µ–ª—å?*  \n'
             f'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\!',
        reply_markup=kb.air_foul,
        parse_mode=ParseMode.MARKDOWN_V2
    )

@router.callback_query(F.data == 'air_foul', UserData.aim)
async def air_foul(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text=f'üòî *–ñ–∞–ª—å, —á—Ç–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å\.\.\.*  \n'
    )
    await state.update_data(aim=callback.message.text)
    db.insert(callback.message.chat.id, await state.get_data())
    test_dict = db.print_data(callback.message.chat.id)

    await callback.message.answer(
        text='üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ:*  \n\n'
             f'üë±‚Äçüé§ *–ò–º—è:* {test_dict[0]}  \n'
             f'üïí *–í–æ–∑—Ä–∞—Å—Ç:* {test_dict[1]}  \n'
             f'üöª *–ü–æ–ª:* {test_dict[2]}  \n',
        reply_markup=kb.check_data,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await callback.answer()
    await state.clear()

@router.callback_query(F.data == 'correct')
async def correct(callback: CallbackQuery):
    await callback.message.answer(
        text=f'üéâ *–ö–ª–∞—Å—Å\!*  \n'
             f'üöÄ *–°–∞–º–æ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º\!*',
        reply_markup=kb.topic_start,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await callback.answer()

@router.callback_query(F.data == 'incorrect')
async def incorrect(callback: CallbackQuery, state: FSMContext):
    db.delete_user(callback.message.chat.id)
    await callback.message.answer(
        text=f'üîÑ *–®–∏–ª–æ –Ω–∞ –º—ã–ª–æ\.\.\. –¢–æ –µ—Å—Ç—å, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:*',
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(UserData.name)
    await callback.answer()

@router.callback_query(F.data == 'topic_start')
async def topic_start(callback: CallbackQuery, state: FSMContext):
    if not db.check_primary(callback.message.chat.id):
        await callback.message.answer(
        text=f'üìÑ *–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\.*  \n'
             f'‚ö†Ô∏è *–§–∞–π–ª, –∫—Å—Ç–∞—Ç–∏, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ\.*',
        parse_mode=ParseMode.MARKDOWN_V2
    )
        await state.set_state(TopicAnalize.start_analize)

    else:
        await callback.message.answer(
            text=f'‚ùóÔ∏è *–ù–µ –≤–∏–∂—É –∞–Ω–∫–µ—Ç—É –æ—Ç —Ç–µ–±—è,*  \n'
                 f'üìù *–Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\!*',
            reply_markup=kb.ancet_start,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    await callback.answer()

@router.message(F.document, TopicAnalize.start_analize)
async def analyze(message: Message, state: FSMContext):
    global res, lda_model, them_count, mydict, corpus, st
    if '.csv' in message.document.file_name:
        await message.answer(text=f'‚úÖ *–ü—Ä–∏–Ω—è–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é\.\.\.*', parse_mode=ParseMode.MARKDOWN_V2)
        await message.bot.download(message.document.file_id, destination='../csv.csv')

        with open('../TG_BOT/tgbot/csv.csv') as f:
            st1 = f.read()

        res, lda_model, them_count, mydict, corpus, st = gn.start(st1)

        await message.answer(text=f'üîç *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:*  \n{res}', reply_markup=kb.rezult_choice, parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(TopicAnalize.choice_rezult)
    else:
        await message.answer(text=f'‚ùå *–í–∏–¥–∏–º–æ, —Ñ–∞–π–ª –Ω–µ —Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\.*  \n'
                                  f'üìÑ *–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å CSV —Ñ–∞–π–ª–æ–º\!*', parse_mode=ParseMode.MARKDOWN_V2)

@router.message(TopicAnalize.start_analize)
async def analyze_e(message: Message):
    await message.reply(text=f'‚ùóÔ∏è *–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –±–æ—Ç–æ–º\.\.\. –û–¥—É–º–∞–π—Å—è\!*', parse_mode=ParseMode.MARKDOWN_V2)

@router.message(F.text.startswith('‚úÖ–î–∏–∞–≥'), TopicAnalize.choice_rezult)
async def show_res(message: Message):
    if message.text[-1] == '1':
        if them_count <= 6:
            viz.plot_topic_distribution(lda_model, 3)
        else:
            viz.plot_topic_distribution(lda_model, 4)
        await message.answer_photo(photo=FSInputFile('../res1.png'),
                                   caption=f'üìä *–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–∞–º—ã–µ –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∂–¥–æ–π —Å–º—ã—Å–ª–æ–≤–æ–π –≥—Ä—É–ø–ø—ã\.*', parse_mode=ParseMode.MARKDOWN_V2)
    else:
        prob.probably_topics(lda_model, mydict, them_count)
        await message.answer_photo(photo=FSInputFile('../res2.png'),
                                   caption=f'üìà *–ó–Ω–∞—á–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –ø–æ–¥—Ç–µ–º—ã –≤ –æ–±—â–µ–º –º–∞—Å—Å–∏–≤–µ –æ—Ç–≤–µ—Ç–æ–≤\.*', parse_mode=ParseMode.MARKDOWN_V2)

@router.message(F.text.startswith('üìù–ü–æ–ª'), TopicAnalize.choice_rezult)
async def full_list(message: Message):
    await message.answer(text=f'üìÑ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç—ã:  \n{st}')

@router.message(F.text.startswith('‚ùå–í—ã—Ö'), TopicAnalize.choice_rezult)
async def exit_analysis(message: Message, state: FSMContext):
    await message.answer(text=f'üö™ *–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞\.*', reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2)
    await message.answer(text=f'üòä *–ù–æ –Ω–µ –æ–≥–æ—Ä—á–∞–π—Ç–µ—Å—å, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\!*',
                         reply_markup=kb.topic_start, parse_mode=ParseMode.MARKDOWN_V2)
    await state.clear()

@router.message(F.text.startswith('üöÄ–ó–∞–ø'), TopicAnalize.choice_rezult)
async def gpt_request(message: Message):
    await message.answer(text=f'üöÄ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    await message.answer(text=req.get_answer(st))

@router.message(TopicAnalize.choice_rezult)
async def state_e(message: Message):
    await message.answer(text=f'‚ùì *–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞*', parse_mode=ParseMode.MARKDOWN_V2)

@router.message(F.text, F.document, F.emoji, F.photo)
async def any_text(message: Message):
    await message.answer(
        text=f'‚ùå *–¢–∞–∫–æ–µ —è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é\!*  \n'
             f'üìú *–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\.*',
        parse_mode=ParseMode.MARKDOWN_V2
    )